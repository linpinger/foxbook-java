/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.linpinger.foxbook;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author guanli
 */
public class JPanel_SearchBook extends javax.swing.JPanel {

    private javax.swing.table.DefaultTableModel tList;
    private JDialog thisWin;
    private String RootURL = "";
    final String TYPE_SE_SITE_LIST = "ES";
    final String TYPE_SE_PAGE_LIST = "EL";
    final String TYPE_ZSSQ_SITE_LIST = "SZS";
    final String TYPE_ZSSQ_PAGE_LIST = "SZL";
    final String TYPE_QREADER_PAGE_LIST = "SKL";
    final String TYPE_EASOU_SITE_LIST = "SES";
    final String TYPE_EASOU_PAGE_LIST = "SEL";

    /**
     * Creates new form JPanel_SearchBook
     */
    public JPanel_SearchBook(String bookName, JDialog xx) {
        this.thisWin = xx;

        tList = new javax.swing.table.DefaultTableModel(null, new String[]{
            "类型", "URL", "标题"
        }) {
            boolean[] canEdit = new boolean[]{
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };

        initComponents();
        // 设置宽度
        TableColumnModel tcmL = uList.getTableHeader().getColumnModel();
        tcmL.getColumn(0).setPreferredWidth(60);
        tcmL.getColumn(1).setPreferredWidth(400);
        tcmL.getColumn(2).setPreferredWidth(350);

        uSearchString.insertItemAt(bookName, 0);
        uSearchString.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uSearchType = new javax.swing.JComboBox();
        uSearchString = new javax.swing.JComboBox();
        uSearchIt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        uList = new javax.swing.JTable();
        uBookURL = new javax.swing.JTextField();

        uSearchType.setMaximumRowCount(15);
        uSearchType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "S:起点中文", "S:追书神器", "S:快读", "S:宜搜", "E:SoGou", "E:Yahoo", "E:Bing", "E:soso", "E:baidu", "E:so", "E:pangusou" }));

        uSearchString.setEditable(true);
        uSearchString.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "书名", "书名 site:qidian.com" }));

        uSearchIt.setMnemonic('s');
        uSearchIt.setText("搜索(S)");
        uSearchIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uSearchItActionPerformed(evt);
            }
        });

        uList.setModel(tList);
        uList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(uList);

        uBookURL.setText("最终书籍URL，复制我哦");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uSearchString, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uBookURL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uSearchIt)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(uSearchType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uSearchString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uSearchIt)
                    .addComponent(uBookURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void uSearchItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uSearchItActionPerformed
        // TODO add your handling code here:
        String siteType = uSearchType.getSelectedItem().toString();
        String SearchString = uSearchString.getSelectedItem().toString();

        String html = "";
        String seURL = "";
        if (siteType.contains("E:")) { // 搜索引擎
            try {
                if (siteType.equalsIgnoreCase("E:SoGou")) {
                    seURL = "http://www.sogou.com/web?query=" + URLEncoder.encode(SearchString, "GB2312") + "&num=50";
                }
                if (siteType.equalsIgnoreCase("E:Yahoo")) {
                    seURL = "http://search.yahoo.com/search?n=40&p=" + URLEncoder.encode(SearchString, "UTF-8");
                }
                if (siteType.equalsIgnoreCase("E:Bing")) {
                    seURL = "http://cn.bing.com/search?q=" + URLEncoder.encode(SearchString, "UTF-8");
                }
                if (siteType.equalsIgnoreCase("E:soso")) {
                    seURL = "http://www.soso.com/q?w=" + URLEncoder.encode(SearchString, "GB2312");
                }
                if (siteType.equalsIgnoreCase("E:baidu")) {
                    seURL = "http://www.baidu.com/s?wd=" + URLEncoder.encode(SearchString, "UTF-8");
                }
                if (siteType.equalsIgnoreCase("E:so")) {
                    seURL = "http://www.so.com/s?q=" + URLEncoder.encode(SearchString, "UTF-8");
                }
                if (siteType.equalsIgnoreCase("E:pangusou")) {
                    seURL = "http://search.panguso.com/pagesearch.htm?q=" + URLEncoder.encode(SearchString, "UTF-8");
                }
                // 下载页面，分析链接
                html = FoxBookLib.downhtml(seURL);
                List<Map<String, Object>> seo = FoxBookLib.getSearchEngineHref(html, SearchString);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = seo.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_SE_SITE_LIST, mm.get("url"), mm.get("name")});
                }
            } catch (Exception e) {
                e.toString();
            }
        }
        if (siteType.contains("S:")) {  // 特殊站点
            if (siteType.equalsIgnoreCase("S:起点中文")) {
                seURL = site_qidian.qidian_getSearchURL_Mobile(SearchString);
                String json = FoxBookLib.downhtml(seURL, "utf-8");
                List<Map<String, Object>> qds = site_qidian.json2BookList(json);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = qds.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_SE_SITE_LIST, mm.get("url"), mm.get("name")});
                }
            }
            if (siteType.equalsIgnoreCase("S:追书神器")) {
                seURL = site_zssq.getUrlSE(SearchString);
                String json = site_zssq.json2BookID(FoxBookLib.downhtml(seURL, "utf-8"));
                uBookURL.setText("&bid=" + json);
                seURL = site_zssq.getUrlSL(json);
                json = FoxBookLib.downhtml(seURL, "utf-8");
                List<Map<String, Object>> ddl = site_zssq.json2SiteList(json);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = ddl.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_ZSSQ_SITE_LIST, mm.get("url"), mm.get("name")});
                }
            }
            if (siteType.equalsIgnoreCase("S:快读")) {
                seURL = site_qreader.qreader_Search(SearchString);
                uBookURL.setText(seURL);
                List<Map<String, Object>> kds = site_qreader.qreader_GetIndex(seURL, 22, 0);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = kds.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_QREADER_PAGE_LIST, mm.get("url"), mm.get("name")});
                }
            }
            if (siteType.equalsIgnoreCase("S:宜搜")) {
                seURL = site_easou.getUrlSE(SearchString);
                String json = FoxBookLib.downhtml(seURL, "utf-8");
                seURL = site_easou.getUrlSL(site_easou.json2IDs(json, 1));
                json = FoxBookLib.downhtml(seURL, "utf-8");
                List<Map<String, Object>> ddl = site_easou.json2SiteList(json);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = ddl.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_EASOU_SITE_LIST, mm.get("url"), mm.get("name")});
                }

            }

        }

    }//GEN-LAST:event_uSearchItActionPerformed

    private void uListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uListMouseClicked
        // TODO add your handling code here:
        if (2 == evt.getClickCount()) {
            int nRow = uList.getSelectedRow();
            String nowResultType = uList.getValueAt(nRow, 0).toString();
            String nowURL = uList.getValueAt(nRow, 1).toString();
            //System.out.println(uList.getValueAt(nRow, 0));

            String html = "";
            if (nowResultType.equalsIgnoreCase(TYPE_SE_SITE_LIST)) { // 处理:搜索引擎返回的站点列表
                uBookURL.setText(nowURL);
                RootURL = nowURL; // 作为后面子目录的根路径
                html = FoxBookLib.downhtml(nowURL);
                List<Map<String, Object>> srt = FoxBookLib.tocHref(html, 22);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = srt.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_SE_PAGE_LIST, mm.get("url"), mm.get("name")});
                }
            }
            if (nowResultType.equalsIgnoreCase(TYPE_SE_PAGE_LIST)) { // 处理:章节列表
                if (RootURL.length() > 3) { // 获取完整路径
                    nowURL = FoxBookLib.getFullURL(RootURL, nowURL);
                }
                html = FoxBookLib.downhtml(nowURL);
                html = FoxBookLib.pagetext(html);
                if (html != null && html.length() > 200) {
                    JOptionPane.showMessageDialog(null, html.substring(0, 200));
                }
            }

            if (nowResultType.equalsIgnoreCase(TYPE_ZSSQ_SITE_LIST)) { // 处理: 追书神器 站点列表
                String oldBID = uBookURL.getText();
                if (oldBID.contains("&bid=")) {
                    uBookURL.setText(nowURL + oldBID);
                } else {
                    uBookURL.setText(nowURL);
                }
                html = FoxBookLib.downhtml(nowURL, "utf-8");
                List<Map<String, Object>> dtl = site_zssq.json2PageList(html, 22);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = dtl.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_ZSSQ_PAGE_LIST, mm.get("url"), mm.get("name")});
                }
            }
            if (nowResultType.equalsIgnoreCase(TYPE_ZSSQ_PAGE_LIST)) { // 处理: 追书神器 章节列表
                html = FoxBookLib.downhtml(nowURL, "utf-8");
                html = site_zssq.json2Text(html);
                if (html != null && html.length() > 200) {
                    JOptionPane.showMessageDialog(null, html.substring(0, 200));
                }
            }
            if (nowResultType.equalsIgnoreCase(TYPE_QREADER_PAGE_LIST)) { // 处理: 快读 章节列表
                html = site_qreader.qreader_GetContent(nowURL);
                if (html != null && html.length() > 200) {
                    JOptionPane.showMessageDialog(null, html.substring(0, 200));
                }
            }
            if (nowResultType.equalsIgnoreCase(TYPE_EASOU_SITE_LIST)) { // 处理: 宜搜 站点列表
                uBookURL.setText(nowURL);
                String sGIDNID = "";
                Matcher m = Pattern.compile("(?i).*(gid=[0-9]+&nid=[0-9]+)&").matcher(nowURL);
                while (m.find()) {
                    sGIDNID = m.group(1);
                }
                html = FoxBookLib.downhtml(nowURL, "utf-8");
                List<Map<String, Object>> dtl = site_easou.json2PageList(html, sGIDNID, 22);
                // 输出到列表
                tList.setRowCount(0); // 清空列表
                Iterator<Map<String, Object>> itr = dtl.iterator();
                while (itr.hasNext()) {
                    HashMap<String, Object> mm = (HashMap<String, Object>) itr.next();
                    tList.addRow(new Object[]{TYPE_EASOU_PAGE_LIST, mm.get("url"), mm.get("name")});
                }
            }
            if (nowResultType.equalsIgnoreCase(TYPE_EASOU_PAGE_LIST)) { // 处理: 宜搜 章节列表
                html = FoxBookLib.downhtml(nowURL, "utf-8");
                html = site_easou.json2Text(html);
                if (html != null && html.length() > 200) {
                    JOptionPane.showMessageDialog(null, html.substring(0, 200));
                }
            }
        }
        if (java.awt.event.MouseEvent.BUTTON3 == evt.getButton()) {
            int nRow = uList.rowAtPoint(evt.getPoint());
            uList.setRowSelectionInterval(nRow, nRow);
            //           jPopupMenuBook.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_uListMouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField uBookURL;
    private javax.swing.JTable uList;
    private javax.swing.JButton uSearchIt;
    private javax.swing.JComboBox uSearchString;
    private javax.swing.JComboBox uSearchType;
    // End of variables declaration//GEN-END:variables
}
